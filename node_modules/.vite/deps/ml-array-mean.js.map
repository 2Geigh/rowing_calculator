{
  "version": 3,
  "sources": ["../../is-any-array/src/index.ts", "../../ml-array-sum/lib-es6/index.js", "../../ml-array-mean/lib-es6/index.js"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n\nexport type AnyArray =\n  | any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value: unknown): value is AnyArray {\n  const tag = toString.call(value);\n  return tag.endsWith('Array]') && !tag.includes('Big');\n}\n", "import { isAnyArray } from 'is-any-array';\n\nfunction sum(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport { sum as default };\n", "import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport { mean as default };\n"],
  "mappings": ";;;AACA,IAAM,WAAW,OAAO,UAAU;AAoB5B,SAAU,WAAW,OAAc;AACvC,QAAM,MAAM,SAAS,KAAK,KAAK;AAC/B,SAAO,IAAI,SAAS,QAAQ,KAAK,CAAC,IAAI,SAAS,KAAK;AACtD;;;ACtBA,SAAS,IAAI,OAAO;AAClB,MAAI,CAAC,WAAW,KAAK,GAAG;AACtB,UAAM,IAAI,UAAU,wBAAwB;AAAA,EAC9C;AAEA,MAAI,MAAM,WAAW,GAAG;AACtB,UAAM,IAAI,UAAU,yBAAyB;AAAA,EAC/C;AAEA,MAAI,WAAW;AAEf,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAY,MAAM,CAAC;AAAA,EACrB;AAEA,SAAO;AACT;;;AChBA,SAAS,KAAK,OAAO;AACnB,SAAO,IAAI,KAAK,IAAI,MAAM;AAC5B;",
  "names": []
}
